import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
import argparse
import torch
import onnx
from per_op_profiler import profile_op  # reused function from per_op_profiler
import os
import csv

# Generate dummy input

def generate_dummy_input(model):
    """
    Generates a dummy tensor based on the first input of the ONNX model
    """
    input_tensor = model.graph.input[0]
    shape = [dim.dim_value if dim.dim_value > 0 else 1 for dim in input_tensor.type.tensor_type.shape.dim]
    return tuple(shape)

# Profile network per op

def profile_network_per_op(onnx_model_path, device, runs=10, csv_file="network_per_op_results.csv", dtype="float32"):
    model = onnx.load(onnx_model_path)
    results = []

    # Generate dummy input shape
    input_shape = generate_dummy_input(model)

    # Go through each node in the ONNX graph
    for node in model.graph.node:
        op_type = node.op_type.lower()

        # Use the per_op_profiler function directly
        try:
            result = profile_op(op_type, input_shape, dtype, device, runs=runs)
            results.append(result)
        except ValueError:
            print(f"Skipping unsupported op: {op_type}")

    # Save CSV
    if results:
        file_exists = os.path.isfile(csv_file)
        with open(csv_file, "a", newline="") as f:
            writer = csv.DictWriter(f, fieldnames=results[0].keys())
            if not file_exists:
                writer.writeheader()
            for r in results:
                writer.writerow(r)

    print(f"Per-op profiling complete. Results saved to {csv_file}")
    return results

# Main
def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--model", required=True, help="Path to ONNX model")
    parser.add_argument("--device", default=None, choices=["cpu","cuda"], help="Device to run on")
    parser.add_argument("--runs", type=int, default=10, help="Number of iterations")
    parser.add_argument("--csv", default="network_per_op_results.csv", help="CSV output file")
    parser.add_argument("--dtype", default="float32", help="Tensor precision")
    args = parser.parse_args()

    device = torch.device(args.device or ("cuda" if torch.cuda.is_available() else "cpu"))

    profile_network_per_op(args.model, device, runs=args.runs, csv_file=args.csv, dtype=args.dtype)

if __name__ == "__main__":
    main()
